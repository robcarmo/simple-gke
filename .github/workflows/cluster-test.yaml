name: Manual Cluster Verification
on:
  workflow_dispatch:
    inputs:
      cluster_name:
        description: 'GKE Cluster Name'
        required: true
        default: 'basic-gke-cluster'
      location:
        description: 'GCP Region'
        required: true
        default: 'us-east1'
      timeout:
        description: 'Test Timeout (seconds)'
        required: true
        default: '300' # Keep as string, shell will handle it

jobs:
  cluster-verification:
    runs-on: ubuntu-latest
    steps:
      - name: Validate Inputs
        run: |
          echo "Testing cluster: ${{ github.event.inputs.cluster_name }}"
          echo "Region: ${{ github.event.inputs.location }}"
          echo "Timeout: ${{ github.event.inputs.timeout }} seconds"

      # Permissions are needed for google-github-actions/auth
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure GKE Access
        # Use auth@v2 which is prerequisite for get-gke-credentials@v1
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ github.event.inputs.cluster_name }}
          location: ${{ github.event.inputs.location }}
          # No need to pass credentials here if using google-github-actions/auth@v2 first

      - name: Verify Deployment
        run: |
          echo "Verifying deployment 'hello-world' has 1 available replica..."
          AVAILABLE_REPLICAS=$(kubectl get deployment hello-world -o jsonpath='{.status.availableReplicas}')
          if [[ "$AVAILABLE_REPLICAS" -eq 1 ]]; then
            echo "Deployment verification successful."
          else
            echo "Error: Expected 1 available replica, found $AVAILABLE_REPLICAS"
            kubectl get deployment hello-world -o yaml # Print details for debugging
            exit 1
          fi

      - name: End-to-End Test
        # Remove the problematic timeout-minutes line
        run: |
          EXTERNAL_IP=""
          TIMEOUT_SECONDS=${{ github.event.inputs.timeout }}
          WAIT_INTERVAL=10
          MAX_WAIT_ITERATIONS=$(( TIMEOUT_SECONDS / WAIT_INTERVAL ))

          echo "Attempting to get External IP for service 'hello-world' (max wait: ${TIMEOUT_SECONDS}s)..."
          for (( i=1; i<=MAX_WAIT_ITERATIONS; i++ )); do
            EXTERNAL_IP=$(kubectl get service hello-world -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            if [[ -n "$EXTERNAL_IP" && "$EXTERNAL_IP" != "<none>" ]]; then
              echo "Found External IP: $EXTERNAL_IP"
              break
            fi
            if [[ $i -eq $MAX_WAIT_ITERATIONS ]]; then
               echo "Error: Timed out waiting for External IP after ${TIMEOUT_SECONDS} seconds."
               kubectl get service hello-world # Print service details for debugging
               exit 1
            fi
            echo "Still waiting for External IP ($(( i * WAIT_INTERVAL ))s / ${TIMEOUT_SECONDS}s)..."
            sleep $WAIT_INTERVAL
          done

          echo "Running curl test with timeout: ${TIMEOUT_SECONDS}s"
          # Use the 'timeout' command with the input value directly
          timeout $TIMEOUT_SECONDS bash -c -- ' \
            curl -s "http://$EXTERNAL_IP" \
              --retry 5 \
              --retry-delay 10 \
              --max-time $TIMEOUT_SECONDS \
              --fail --show-error \
              | grep "Hello World!" \
          '
          CURL_EXIT_CODE=$?

          if [[ $CURL_EXIT_CODE -eq 0 ]]; then
             echo "End-to-End test successful!"
          elif [[ $CURL_EXIT_CODE -eq 124 ]]; then
             echo "Error: End-to-End test timed out after $TIMEOUT_SECONDS seconds."
             exit 1
          else
             echo "Error: End-to-End test failed with exit code $CURL_EXIT_CODE."
             # Attempt one last curl without grep to see the output
             echo "Attempting final curl to get response body:"
             curl -v "http://$EXTERNAL_IP" --max-time 30 || echo "Final curl also failed."
             exit 1
          fi